{"version":3,"file":"microbit.umd.js","sources":["../src/promise-queue.ts","../src/services/device-information.ts","../src/service-helper.ts","../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../src/event-dispatcher.ts","../src/services/button.ts","../src/services/led.ts","../src/services/temperature.ts","../src/services/accelerometer.ts","../src/services/magnetometer.ts","../src/services/io-pin.ts","../src/services/uart.ts","../src/services/event.ts","../src/services/dfu-control.ts","../src/index.ts"],"sourcesContent":["/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * @hidden\n */\ninterface QueuedPromise {\n    fn: () => Promise<any>;\n    resolve: (value?: any | PromiseLike<any> | undefined) => void;\n    reject: (reason?: any) => void;\n}\n\n/**\n * @hidden\n */\nexport class PromiseQueue {\n\n    private queue: QueuedPromise[] = [];\n    private running = 0;\n\n    constructor(private concurrent = 1) {\n    }\n\n    private async pump(): Promise<void> {\n        if (this.running >= this.concurrent) {\n            return;\n        }\n\n        const promise = this.queue.shift();\n\n        if (!promise) {\n            return;\n        }\n\n        this.running ++;\n\n        try {\n            const result = await promise.fn();\n            promise.resolve(result);\n        } catch (error) {\n            promise.reject(error);\n        }\n\n        this.running --;\n        return this.pump();\n    }\n\n    public add<T>(fn: () => Promise<T>): Promise<T> {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                fn,\n                resolve,\n                reject\n            });\n\n            return this.pump();\n        });\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum DeviceInformationCharacteristic {\n    modelNumber = \"00002a24-0000-1000-8000-00805f9b34fb\",\n    serialNumber = \"00002a25-0000-1000-8000-00805f9b34fb\",\n    firmwareRevision = \"00002a26-0000-1000-8000-00805f9b34fb\",\n    hardwareRevision = \"00002a27-0000-1000-8000-00805f9b34fb\",\n    manufacturer = \"00002a29-0000-1000-8000-00805f9b34fb\"\n}\n\n/**\n * Device information structure\n */\nexport interface DeviceInformation {\n    /**\n     * Model Number\n     */\n    modelNumber?: string;\n    /**\n     * Serial Number\n     */\n    serialNumber?: string;\n    /**\n     * Firmware Revision\n     */\n    firmwareRevision?: string;\n    /**\n     * Hardware Revision\n     */\n    hardwareRevision?: string;\n    /**\n     * Manufacturer Name\n     */\n    manufacturer?: string;\n}\n\n/**\n * Device Information Service\n */\nexport class DeviceInformationService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"0000180a-0000-1000-8000-00805f9b34fb\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DeviceInformationService> {\n        return new DeviceInformationService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Read device information\n     */\n    public async readDeviceInformation(): Promise<DeviceInformation> {\n        const info: DeviceInformation = {};\n\n        const modelNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.modelNumber);\n        if (modelNumber) info.modelNumber = modelNumber;\n\n        const serialNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.serialNumber);\n        if (serialNumber) info.serialNumber = serialNumber;\n\n        const firmwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.firmwareRevision);\n        if (firmwareRevision) info.firmwareRevision = firmwareRevision;\n\n        const hardwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.hardwareRevision);\n        if (hardwareRevision) info.hardwareRevision = hardwareRevision;\n\n        const manufacturer = await this.readStringCharacteristic(DeviceInformationCharacteristic.manufacturer);\n        if (manufacturer) info.manufacturer = manufacturer;\n\n        return info;\n    }\n\n    private async readStringCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<string | undefined> {\n        try {\n            const view = await this.helper.getCharacteristicValue(uuid);\n            const buffer = view.buffer.slice(view.byteOffset, view.byteOffset + view.byteLength);\n            return String.fromCharCode.apply(null, Array.from(new Uint8Array(buffer)));\n        } catch (_e) {\n            return undefined;\n        }\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { PromiseQueue } from \"./promise-queue\";\n\n/**\n * @hidden\n */\nexport interface ServiceEventHandler {\n    characteristic: BluetoothCharacteristicUUID;\n    handler: (event: Event) => void;\n}\n\n/**\n * @hidden\n */\nexport class ServiceHelper {\n\n    private static queue = new PromiseQueue();\n\n    private characteristics?: BluetoothRemoteGATTCharacteristic[];\n\n    constructor(private service: BluetoothRemoteGATTService, private emitter?: EventEmitter) {\n    }\n\n    private async getCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n        if (!this.characteristics) {\n            this.characteristics = await this.service.getCharacteristics();\n        }\n\n        return this.characteristics.find(characteristic => characteristic.uuid === uuid);\n    }\n\n    public async getCharacteristicValue(uuid: BluetoothCharacteristicUUID): Promise<DataView> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error(\"Unable to locate characteristic\");\n        }\n\n        return await ServiceHelper.queue.add(async () => characteristic.readValue());\n    }\n\n    public async setCharacteristicValue(uuid: BluetoothCharacteristicUUID, value: BufferSource): Promise<void> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error(\"Unable to locate characteristic\");\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.writeValue(value));\n    }\n\n    public async handleListener(event: string, uuid: BluetoothCharacteristicUUID, handler: (event: Event) => void) {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            return;\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.startNotifications());\n\n        this.emitter!.on(\"newListener\", (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.addEventListener(\"characteristicvaluechanged\", handler));\n        });\n\n        this.emitter!.on(\"removeListener\", (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.removeEventListener(\"characteristicvaluechanged\", handler));\n        });\n    }\n}\n","'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport interface TypedDispatcher<T> {\n    addEventListener<K extends keyof T>(type: K, listener: (event: CustomEvent<T[K]>) => void): void;\n    removeEventListener<K extends keyof T>(type: K, callback: (event: CustomEvent<T[K]>) => void): void;\n    dispatchEvent(event: CustomEvent<T>): boolean;\n    dispatchEvent<K extends keyof T>(type: K, detail: T[K]): boolean;\n    addListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    on<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    once<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependOnceListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeAllListeners<K extends keyof T>(event?: K): this;\n    // tslint:disable-next-line:ban-types\n    listeners<K extends keyof T>(event: K): Function[];\n    emit<K extends keyof T>(event: K, data: T[K]): boolean;\n    // tslint:disable-next-line:array-type\n    eventNames<K extends keyof T>(): Array<K>;\n    listenerCount<K extends keyof T>(type: K): number;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n}\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter implements EventTarget {\n\n    private isEventListenerObject = (listener: EventListenerOrEventListenerObject): listener is EventListenerObject => (listener as EventListenerObject).handleEvent !== undefined;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject | null) {\n        if (listener) {\n            const handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;\n            super.addListener(type, handler);\n        }\n    }\n\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null) {\n        if (callback) {\n            const handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;\n            super.removeListener(type, handler);\n        }\n    }\n\n    public dispatchEvent(event: Event): boolean;\n    public dispatchEvent<T>(type: string, detail: T): boolean;\n    public dispatchEvent<T>(eventOrType: Event | string, detail?: T): boolean {\n        let event: Event;\n        if (typeof eventOrType === \"string\") {\n            event = new CustomEvent(eventOrType, {\n                detail\n            });\n        } else {\n            event = eventOrType;\n        }\n\n        return super.emit(event.type, event);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum ButtonCharacteristic {\n    buttonAState = \"e95dda90-251d-470a-a062-fa1922dfa9a8\",\n    buttonBState = \"e95dda91-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Button state enum\n */\nexport enum ButtonState {\n    /**\n     * Button released\n     */\n    Release = 0,\n    /**\n     * Button pressed - short\n     */\n    ShortPress = 1,\n    /**\n     * Button pressed - long\n     */\n    LongPress = 2\n}\n\n/**\n * Events raised by the button service\n */\nexport interface ButtonEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof ButtonEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof ButtonEvents;\n    /**\n     * Button A state changed event\n     */\n    buttonastatechanged: ButtonState;\n    /**\n     * Button B state changed event\n     */\n    buttonbstatechanged: ButtonState;\n}\n\n/**\n * Button Service\n */\nexport class ButtonService extends (EventDispatcher as new() => TypedDispatcher<ButtonEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d9882-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<ButtonService> {\n        const bluetoothService = new ButtonService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"buttonastatechanged\", ButtonCharacteristic.buttonAState, this.buttonAStateChangedHandler.bind(this));\n        await this.helper.handleListener(\"buttonbstatechanged\", ButtonCharacteristic.buttonBState, this.buttonBStateChangedHandler.bind(this));\n    }\n\n    /**\n     * Read state of button A\n     */\n    public async readButtonAState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonAState);\n        return view.getUint8(0);\n    }\n\n    /**\n     * Read state of button B\n     */\n    public async readButtonBState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonBState);\n        return view.getUint8(0);\n    }\n\n    private buttonAStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"buttonastatechanged\", view.getUint8(0));\n    }\n\n    private buttonBStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"buttonbstatechanged\", view.getUint8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum LedCharacteristic {\n    ledMatrixState = \"e95d7b77-251d-470a-a062-fa1922dfa9a8\",\n    ledText = \"e95d93ee-251d-470a-a062-fa1922dfa9a8\",\n    scrollingDelay = \"e95d0d2d-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * LED matrix structure\n */\nexport type LedMatrix = [\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean]\n];\n\n/**\n * LED Service\n */\nexport class LedService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95dd91d-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<LedService> {\n        return new LedService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Write text to the LED matrix\n     * @param text Te text to display\n     */\n    public async writeText(text: string): Promise<void> {\n        const encoded = this.encodeString(text);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledText, encoded);\n    }\n\n    /**\n     * Read matrix state\n     */\n    public async readMatrixState(): Promise<LedMatrix> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.ledMatrixState);\n        return this.viewToLedMatrix(view);\n    }\n\n    /**\n     * Write matrix state\n     * @param state The matrix data to set\n     */\n    public async writeMatrixState(state: LedMatrix): Promise<void> {\n        const view = this.ledMatrixToView(state);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledMatrixState, view);\n    }\n\n    /**\n     * Get scrolling delay\n     */\n    public async getScrollingDelay(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.scrollingDelay);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set scrolling delay\n     * @param delay The delay to set (milliseconds)\n     */\n    public async setScrollingDelay(delay: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, delay, true);\n        return this.helper.setCharacteristicValue(LedCharacteristic.scrollingDelay, view);\n    }\n\n    private encodeString(text: string): ArrayBuffer {\n        const buffer = new ArrayBuffer(text.length);\n        const view = new Uint8Array(buffer);\n        for (let i = 0; i < text.length; i++) {\n            view[i] = text.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    private viewToLedMatrix(view: DataView): LedMatrix {\n        const matrix: boolean[][] = [];\n        for (let i = 0; i < 5; i ++) {\n            matrix[i] = this.byteToBoolArray(view.getUint8(i));\n        }\n        return matrix as LedMatrix;\n    }\n\n    private byteToBoolArray(byte: number): boolean[] {\n        const bools = [false, false, false, false, false];\n        for (let i = 0; i < bools.length; i++) {\n            bools[i] = (byte & 1) === 1;\n            byte >>= 1;\n        }\n        return bools.reverse();\n    }\n\n    private ledMatrixToView(matrix: LedMatrix): DataView {\n        const view = new DataView(new ArrayBuffer(5));\n        for (let i = 0; i < 5; i ++) {\n            view.setUint8(i, this.boolArrayToByte(matrix[i]));\n        }\n        return view;\n    }\n\n    private boolArrayToByte(bools: boolean[]): number {\n        return bools.reduce((byte, bool) => byte << 1 | (bool ? 1 : 0), 0);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { TypedDispatcher, EventDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum TemperatureCharacteristic {\n    temperature = \"e95d9250-251d-470a-a062-fa1922dfa9a8\",\n    temperaturePeriod = \"e95d1b25-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Events raised by the temperature service\n */\nexport interface TemperatureEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof TemperatureEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof TemperatureEvents;\n    /**\n     * Temperature changed event\n     */\n    temperaturechanged: number;\n}\n\n/**\n * Temperature Service\n */\nexport class TemperatureService extends (EventDispatcher as new() => TypedDispatcher<TemperatureEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d6100-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<TemperatureService> {\n        const bluetoothService = new TemperatureService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"temperaturechanged\", TemperatureCharacteristic.temperature, this.temperatureChangedHandler.bind(this));\n    }\n\n    /**\n     * Read temperature\n     */\n    public async readTemperature(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperature);\n        return view.getInt8(0);\n    }\n\n    /**\n     * Get temperature sample period\n     */\n    public async getTemperaturePeriod(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperaturePeriod);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set temperature sample period\n     * @param frequency The frequency to use (milliseconds)\n     */\n    public async setTemperaturePeriod(frequency: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return await this.helper.setCharacteristicValue(TemperatureCharacteristic.temperaturePeriod, view);\n    }\n\n    private temperatureChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"temperaturechanged\", view.getInt8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum AccelerometerCharacteristic {\n    accelerometerData = \"e95dca4b-251d-470a-a062-fa1922dfa9a8\",\n    accelerometerPeriod = \"e95dfb24-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Data received from the accelerometer\n */\nexport interface AccelerometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * The sample period to read accelerometer data (milliseconds)\n */\nexport type AccelerometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the accelerometer service\n */\nexport interface AccelerometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof AccelerometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof AccelerometerEvents;\n    /**\n     * Accelerometer data changed event\n     */\n    accelerometerdatachanged: AccelerometerData;\n}\n\n/**\n * Accelerometer Service\n */\nexport class AccelerometerService extends (EventDispatcher as new() => TypedDispatcher<AccelerometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d0753-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<AccelerometerService> {\n        const bluetoothService = new AccelerometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"accelerometerdatachanged\", AccelerometerCharacteristic.accelerometerData, this.accelerometerDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read acceleromter data\n     */\n    public async readAccelerometerData(): Promise<AccelerometerData> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerData);\n        return this.dataViewToAccelerometerData(view);\n    }\n\n    /**\n     * Get accelerometer sample period\n     */\n    public async getAccelerometerPeriod(): Promise<AccelerometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod);\n        return view.getUint16(0, true) as AccelerometerPeriod;\n    }\n\n    /**\n     * Set accelerometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setAccelerometerPeriod(frequency: AccelerometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod, view);\n    }\n\n    private accelerometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToAccelerometerData(view);\n        this.dispatchEvent(\"accelerometerdatachanged\", value);\n    }\n\n    private dataViewToAccelerometerData(view: DataView): AccelerometerData {\n        return {\n            x: view.getInt16(0, true) / 1000.0,\n            y: view.getInt16(2, true) / 1000.0,\n            z: view.getInt16(4, true) / 1000.0\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum MagnetometerCharacteristic {\n    magnetometerData = \"e95dfb11-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerPeriod = \"e95d386c-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerBearing = \"e95d9715-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerCalibration = \"e95db358-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Data received from the magnetometer\n */\nexport interface MagnetometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * Magnetometer calibation state\n */\nexport enum MagnetometerCalibration {\n    /**\n     * Unknown state\n     */\n    unknown = 0,\n    /**\n     * Calibration has been requestes\n     */\n    requested = 1,\n    /**\n     * Calibration completed\n     */\n    completed = 2,\n    /**\n     * Calibration had an error\n     */\n    errored = 3\n}\n\n/**\n * The sample period to read magnetometer data (milliseconds)\n */\nexport type MagnetometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface MagnetometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MagnetometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MagnetometerEvents;\n    /**\n     * Magnetometer data changed event\n     */\n    magnetometerdatachanged: MagnetometerData;\n    /**\n     * Magnetometer bearing changed event\n     */\n    magnetometerbearingchanged: number;\n    /**\n     * Magnetometer calibration changed event\n     */\n    magnetometercalibrationchanged: MagnetometerCalibration;\n}\n\n/**\n * Magnetometer Service\n */\nexport class MagnetometerService extends (EventDispatcher as new() => TypedDispatcher<MagnetometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95df2d8-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<MagnetometerService> {\n        const bluetoothService = new MagnetometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"magnetometerdatachanged\", MagnetometerCharacteristic.magnetometerData, this.magnetometerDataChangedHandler.bind(this));\n        await this.helper.handleListener(\"magnetometerbearingchanged\", MagnetometerCharacteristic.magnetometerBearing, this.magnetometerBearingChangedHandler.bind(this));\n        await this.helper.handleListener(\"magnetometercalibrationchanged\", MagnetometerCharacteristic.magnetometerCalibration, this.magnetometerCalibrationChangedHandler.bind(this));\n    }\n\n    /**\n     * Request magnetometer calibration\n     */\n    public async calibrate() {\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerCalibration, new Uint8Array([1]));\n    }\n\n    /**\n     * Read magnetometer data\n     */\n    public async readMagnetometerData(): Promise<MagnetometerData> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerData);\n        return this.dataViewToMagnetometerData(view);\n    }\n\n    /**\n     * Read magnetometer bearing\n     */\n    public async readMagnetometerBearing(): Promise<number | undefined> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerBearing);\n        if (view.byteLength === 2) {\n            return view.getUint16(0, true);\n        }\n        return undefined;\n    }\n\n    /**\n     * Get magnetometer sample period\n     */\n    public async getMagnetometerPeriod(): Promise<MagnetometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod);\n        return view.getUint16(0, true) as MagnetometerPeriod;\n    }\n\n    /**\n     * Set magnetometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setMagnetometerPeriod(frequency: MagnetometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod, view);\n    }\n\n    private magnetometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToMagnetometerData(view);\n        this.dispatchEvent(\"magnetometerdatachanged\", value);\n    }\n\n    private magnetometerBearingChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 2) {\n            this.dispatchEvent(\"magnetometerbearingchanged\", view.getUint16(0, true));\n        }\n    }\n\n    private magnetometerCalibrationChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 1) {\n            this.dispatchEvent(\"magnetometercalibrationchanged\", view.getUint8(0) as MagnetometerCalibration);\n        }\n    }\n\n    private dataViewToMagnetometerData(view: DataView): MagnetometerData {\n        return {\n            x: view.getInt16(0, true),\n            y: view.getInt16(1, true),\n            z: view.getInt16(2, true)\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\n\n/**\n * @hidden\n */\nexport enum IoPinCharacteristic {\n    pinData = \"e95d8d00-251d-470a-a062-fa1922dfa9a8\",\n    pinAdConfiguration = \"e95d5899-251d-470a-a062-fa1922dfa9a8\",\n    pinIoConfiguration = \"e95db9fe-251d-470a-a062-fa1922dfa9a8\",\n    pwmControl = \"e95dd822-251d-470a-a062-fa1922dfa9a8\"\n}\n\nconst littleEndian = true;\n\n/**\n * Pin data\n */\nexport interface PinData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n}\n\n/**\n * PWM control data\n */\nexport interface PwmControlData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n    /**\n     * Period (in microseconds)\n     */\n    period: number;\n}\n\n/**\n * Analogue/Digital Enum\n */\nexport enum AD {\n    Digital = 0,\n    Analogue = 1\n}\n\n/**\n * Input/Output Enum\n */\nexport enum IO {\n    Output = 0,\n    Input = 1\n}\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface IoPinEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof IoPinEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof IoPinEvents;\n    /**\n     * Pin data changed event\n     */\n    pindatachanged: PinData[];\n}\n\n/**\n * @hidden\n */\nexport class IoPinService extends (EventDispatcher as new() => TypedDispatcher<IoPinEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d127b-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<IoPinService> {\n        const bluetoothService = new IoPinService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"pindatachanged\", IoPinCharacteristic.pinData, this.pinDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read pin data\n     */\n    public async readPinData(): Promise<PinData[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinData);\n        return this.dataViewToPinData(view);\n    }\n\n    /**\n     * Write pin data\n     * @param data The pin data to write\n     */\n    public async writePinData(data: PinData[]): Promise<void> {\n        const view = this.pinDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinData, view);\n    }\n\n    /**\n     * Get pin analogue/digital configuration\n     */\n    public async getAdConfiguration(): Promise<AD[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinAdConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin analogue/digital configuration\n     * @param config The analogue/digital configuration to set\n     */\n    public async setAdConfiguration(config: AD[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinAdConfiguration, view);\n    }\n\n    /**\n     * Get pin input/output configuration\n     */\n    public async getIoConfiguration(): Promise<IO[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinIoConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin input/output configuration\n     * @param config The input/output configuration to set\n     */\n    public async setIoConfiguration(config: IO[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinIoConfiguration, view);\n    }\n\n    /**\n     * Set pin PWM control\n     * @param data The PWM control data to set\n     */\n    public async setPwmControl(data: PwmControlData): Promise<void> {\n        const view = this.pwmControlDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pwmControl, view);\n    }\n\n    private pinDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToPinData(view);\n        this.dispatchEvent(\"pindatachanged\", value);\n    }\n\n    private dataViewToPinData(view: DataView): PinData[] {\n        const data = [];\n        for (let i = 0; i < view.byteLength; i += 2) {\n            data.push({\n                pin: view.getUint8(i),\n                value: view.getUint8(i + 1)\n            });\n        }\n        return data;\n    }\n\n    private pinDataToDataView(data: PinData[]): DataView {\n        const view = new DataView(new ArrayBuffer(data.length * 2));\n        data.forEach((pinData, index) => {\n            view.setUint8(index * 2, pinData.pin);\n            view.setUint8(index * 2 + 1, pinData.value);\n        });\n        return view;\n    }\n\n    private dataViewToConfig(view: DataView): number[] {\n        const result: number[] = [];\n        const value = (view.getUint16(0) << 8) + view.getUint8(2);\n\n        for (let i = 0; i < 24; i++) {\n            result.push(value >> i);\n        }\n\n        return result;\n    }\n\n    private configToDataView(config: number[]): DataView {\n        const view = new DataView(new ArrayBuffer(3));\n        let value = 0;\n\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < config.length; i++) {\n            value &= 1 << config[i];\n        }\n\n        view.setUint16(0, value >> 8, littleEndian);\n        view.setUint8(2, value & 0xff);\n        return view;\n    }\n\n    private pwmControlDataToDataView(data: PwmControlData): DataView {\n        const view = new DataView(new ArrayBuffer(7));\n        view.setUint8(0, data.pin);\n        view.setUint16(1, data.value, littleEndian);\n        view.setUint32(3, data.period, littleEndian);\n        return view;\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum UartCharacteristic {\n    tx = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",\n    rx = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\"\n}\n\n/**\n * Events raised by the UART service\n */\nexport interface UartEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof UartEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof UartEvents;\n    /**\n     * Serial data received event\n     */\n    receive: Uint8Array;\n    /**\n     * Serial received text event\n     */\n    receiveText: string;\n}\n\n/**\n * UART Service\n */\nexport class UartService extends (EventDispatcher as new() => TypedDispatcher<UartEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<UartService> {\n        const bluetoothService = new UartService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"receive\", UartCharacteristic.tx, this.receiveHandler.bind(this));\n        await this.helper.handleListener(\"receiveText\", UartCharacteristic.tx, this.receiveTextHandler.bind(this));\n    }\n\n    /**\n     * Send serial data\n     * @param value The buffer to send\n     */\n    public async send(value: BufferSource): Promise<void> {\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, value);\n    }\n\n    /**\n     * Send serial text\n     * @param value The text to send\n     */\n    public async sendText(value: string): Promise<void> {\n        const arrayData = value.split(\"\").map((e: string) => e.charCodeAt(0));\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, new Uint8Array(arrayData).buffer);\n    }\n\n    private receiveHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = new Uint8Array(view.buffer);\n        this.dispatchEvent(\"receive\", value);\n    }\n\n    private receiveTextHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const numberArray = Array.prototype.slice.call(new Uint8Array(view.buffer));\n        const value = String.fromCharCode.apply(null, numberArray);\n        this.dispatchEvent(\"receiveText\", value);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum EventCharacteristic {\n    microBitRequirements = \"e95db84c-251d-470a-a062-fa1922dfa9a8\",\n    microBitEvent = \"e95d9775-251d-470a-a062-fa1922dfa9a8\",\n    clientRequirements = \"e95d23c4-251d-470a-a062-fa1922dfa9a8\",\n    clientEvent = \"e95d5404-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * micro:bit event\n */\nexport interface MicrobitEvent {\n    /**\n     * The type of event\n     */\n    type: number;\n    /**\n     * The value for the event\n     */\n    value: number;\n}\n\n/**\n * Events raised by the event service\n */\nexport interface MicrobitEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MicrobitEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MicrobitEvents;\n    /**\n     * micro:bit requirements changed event\n     */\n    microbitrequirementschanged: MicrobitEvent;\n    /**\n     * micro:bit event event\n     */\n    microbitevent: MicrobitEvent;\n}\n\n/**\n * Event Service\n */\nexport class EventService extends (EventDispatcher as new() => TypedDispatcher<MicrobitEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d93af-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<EventService> {\n        const bluetoothService = new EventService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"microbitevent\", EventCharacteristic.microBitEvent, this.eventHandler.bind(this));\n        await this.helper.handleListener(\"microbitrequirementschanged\", EventCharacteristic.microBitRequirements, this.microbitRequirementsChangedHandler.bind(this));\n    }\n\n    /**\n     * Get micro:bit event requirements\n     */\n    public async getMicrobitRequirements(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitRequirements);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Set client event requirements\n     * @param type The type of event to set\n     * @param value The value to set\n     */\n    public async setClientRequirements(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientRequirements, view);\n    }\n\n    /**\n     * Read micro:bit event\n     */\n    public async readMicrobitEvent(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitEvent);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Write client event\n     * @param type The event type\n     * @param value The event value\n     */\n    public async writeClientEvent(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientEvent, view);\n    }\n\n    private microbitRequirementsChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent(\"microbitrequirementschanged\", microbitEvent);\n    }\n\n    private eventHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent(\"microbitevent\", microbitEvent);\n    }\n\n    private viewToMicrobitEvent(view: DataView): MicrobitEvent {\n        const type = view.getUint16(0, true);\n        const value = view.getUint16(1, true);\n        return {\n            type,\n            value\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum DfuCharacteristic {\n    dfuControl = \"e95d93b1-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * @hidden\n */\nexport class DfuControlService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d93b0-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DfuControlService> {\n        return new DfuControlService(service);\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Request device switches to DFU mode\n     */\n    public requestDfu(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([1]));\n    }\n\n    /**\n     * Request flash code\n     */\n    public requestFlashCode(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([2]));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { DeviceInformationService } from \"./services/device-information\";\nimport { ButtonService } from \"./services/button\";\nimport { LedService } from \"./services/led\";\nimport { TemperatureService } from \"./services/temperature\";\nimport { AccelerometerService } from \"./services/accelerometer\";\nimport { MagnetometerService } from \"./services/magnetometer\";\nimport { IoPinService } from \"./services/io-pin\";\nimport { UartService } from \"./services/uart\";\nimport { EventService } from \"./services/event\";\nimport { DfuControlService } from \"./services/dfu-control\";\n\nexport interface Services {\n    deviceInformationService?: DeviceInformationService;\n    buttonService?: ButtonService;\n    ledService?: LedService;\n    temperatureService?: TemperatureService;\n    accelerometerService?: AccelerometerService;\n    magnetometerService?: MagnetometerService;\n    uartService?: UartService;\n    eventService?: EventService;\n    dfuControlService?: DfuControlService;\n    ioPinService?: IoPinService;\n}\n\n/**\n * @hidden\n */\ninterface Service {\n    uuid: BluetoothCharacteristicUUID;\n    create(service: BluetoothRemoteGATTService): Promise<any>;\n}\n\n/**\n * @hidden\n */\nclass ServiceBuilder {\n\n    constructor(private services: BluetoothRemoteGATTService[]) {\n    }\n\n    public async createService<T>(serviceClass: (new (service: BluetoothRemoteGATTService) => T) & Service): Promise<T | undefined> {\n        const found = this.services.find(service => service.uuid === serviceClass.uuid);\n\n        if (!found) {\n            return undefined;\n        }\n\n        return await serviceClass.create(found);\n    }\n}\n\nexport const requestMicrobit = async (bluetooth: Bluetooth): Promise<BluetoothDevice | undefined> => {\n    const device = await bluetooth.requestDevice({\n        filters: [\n            {\n                namePrefix: \"BBC micro:bit\"\n            }\n        ],\n        optionalServices: [\n            DeviceInformationService.uuid,\n            ButtonService.uuid,\n            LedService.uuid,\n            TemperatureService.uuid,\n            AccelerometerService.uuid,\n            MagnetometerService.uuid,\n            IoPinService.uuid,\n            UartService.uuid,\n            EventService.uuid,\n            DfuControlService.uuid\n        ]\n    });\n\n    return device;\n};\n\nexport const getServices = async (device: BluetoothDevice): Promise<Services> => {\n    if (!device || !device.gatt) {\n        return {};\n    }\n\n    if (!device.gatt.connected) {\n        await device.gatt.connect();\n    }\n\n    const services = await device.gatt.getPrimaryServices();\n    const builder = new ServiceBuilder(services);\n\n    const deviceInformationService = await builder.createService(DeviceInformationService);\n    const buttonService = await builder.createService(ButtonService);\n    const ledService = await builder.createService(LedService);\n    const temperatureService = await builder.createService(TemperatureService);\n    const accelerometerService = await builder.createService(AccelerometerService);\n    const magnetometerService = await builder.createService(MagnetometerService);\n    const uartService = await builder.createService(UartService);\n    const eventService = await builder.createService(EventService);\n    const dfuControlService = await builder.createService(DfuControlService);\n    const ioPinService = await builder.createService(IoPinService);\n\n    return {\n        deviceInformationService,\n        buttonService,\n        ledService,\n        temperatureService,\n        accelerometerService,\n        magnetometerService,\n        uartService,\n        eventService,\n        dfuControlService,\n        ioPinService\n    };\n};\n"],"names":["DeviceInformationCharacteristic","concurrent","this","PromiseQueue","running","promise","queue","shift","fn","result","_a","resolve","reject","error_1","pump","Promise","_this","push","service","emitter","ServiceHelper","uuid","characteristics","getCharacteristics","_b","find","characteristic","getCharacteristic","Error","add","readValue","value","writeValue","event","handler","startNotifications","on","emitterEvent","listenerCount","addEventListener","removeEventListener","helper","DeviceInformationService","info","readStringCharacteristic","modelNumber","serialNumber","firmwareRevision","hardwareRevision","manufacturer","getCharacteristicValue","view","buffer","slice","byteOffset","byteLength","String","fromCharCode","apply","Array","from","Uint8Array","undefined","EventHandlers","EventEmitter","init","call","$getMaxListeners","that","_maxListeners","defaultMaxListeners","emitNone","isFn","self","len","length","listeners","arrayClone","i","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","args","_addListener","target","type","listener","prepend","m","events","existing","e","TypeError","_events","newListener","emit","_eventsCount","unshift","warned","w","name","count","console","warn","log","_onceWrap","fired","g","removeListener","arguments","evlistener","arr","copy","prototype","Object","create","usingDomains","domain","active","getPrototypeOf","setMaxListeners","n","isNaN","getMaxListeners","er","doError","error","err","context","domainEmitter","domainThrown","addListener","prependListener","once","prependOnceListener","list","position","originalListener","index","k","pop","spliceOne","removeAllListeners","key","keys","ret","unwrapListeners","eventNames","Reflect","ownKeys","ButtonCharacteristic","ButtonState","handleEvent","__extends","EventDispatcher","isEventListenerObject","_super","callback","eventOrType","detail","CustomEvent","LedCharacteristic","ButtonService","bluetoothService","handleListener","buttonAState","buttonAStateChangedHandler","bind","buttonBState","buttonBStateChangedHandler","getUint8","dispatchEvent","TemperatureCharacteristic","LedService","text","encoded","encodeString","setCharacteristicValue","ledText","ledMatrixState","viewToLedMatrix","state","ledMatrixToView","scrollingDelay","getUint16","delay","DataView","ArrayBuffer","setUint16","charCodeAt","matrix","byteToBoolArray","byte","bools","reverse","setUint8","boolArrayToByte","reduce","bool","AccelerometerCharacteristic","TemperatureService","temperature","temperatureChangedHandler","getInt8","temperaturePeriod","frequency","MagnetometerCharacteristic","MagnetometerCalibration","AccelerometerService","accelerometerData","accelerometerDataChangedHandler","dataViewToAccelerometerData","accelerometerPeriod","x","getInt16","y","z","IoPinCharacteristic","MagnetometerService","magnetometerData","magnetometerDataChangedHandler","magnetometerBearing","magnetometerBearingChangedHandler","magnetometerCalibration","magnetometerCalibrationChangedHandler","dataViewToMagnetometerData","magnetometerPeriod","AD","IO","littleEndian","UartCharacteristic","IoPinService","pinData","pinDataChangedHandler","dataViewToPinData","data","pinDataToDataView","pinAdConfiguration","dataViewToConfig","config","configToDataView","pinIoConfiguration","pwmControlDataToDataView","pwmControl","pin","forEach","setUint32","period","EventCharacteristic","UartService","tx","receiveHandler","receiveTextHandler","rx","arrayData","split","map","numberArray","DfuCharacteristic","EventService","microBitEvent","eventHandler","microBitRequirements","microbitRequirementsChangedHandler","viewToMicrobitEvent","clientRequirements","clientEvent","microbitEvent","DfuControlService","dfuControl","services","ServiceBuilder","serviceClass","found","device","gatt","connected","connect","getPrimaryServices","builder","createService","deviceInformationService","buttonService","ledService","temperatureService","accelerometerService","magnetometerService","uartService","eventService","dfuControlService","ioPinService","bluetooth","requestDevice","filters","namePrefix","optionalServices"],"mappings":"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"}